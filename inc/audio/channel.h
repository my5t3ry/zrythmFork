/*
 * audio/channel.h - a channel on the mixer
 *
 * Copyright (C) 2018 Alexandros Theodotou
 *
 * This file is part of Zrythm
 *
 * Zrythm is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Zrythm is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Zrythm.  If not, see <https://www.gnu.org/licenses/>.
 */

#ifndef __AUDIO_CHANNEL_H__
#define __AUDIO_CHANNEL_H__

/**
 * \file
 *
 * API for Channel, representing a channel strip on the mixer.
 *
 * Detailed description.
 */

#include "audio/mixer.h"
#include "plugins/plugin.h"

#include <gdk/gdk.h>

#include <jack/jack.h>

#define MASTER_POS -1 /* master channel special position */
#define FOREACH_STRIP for (int i = 0; i < STRIP_SIZE; i++)
#define FOREACH_AUTOMATABLE(ch) for (int i = 0; i < ch->num_automatables; i++)
#define MAX_FADER_AMP 1.42f

typedef jack_default_audio_sample_t   sample_t;
typedef jack_nframes_t                nframes_t;

typedef struct _ChannelWidget ChannelWidget;
typedef struct Track Track;
typedef struct _TrackWidget TrackWidget;

typedef enum ChannelType
{
  CT_AUDIO, ///< audio generated by audio data in region
  CT_MIDI, ///< audio generated by plugin
  CT_BUS, ///< audio received from input
  CT_MASTER ///< master (behaves like a bus)
} ChannelType;

typedef struct Channel
{
  int                     id;  ///< position in mixer/tracks, useful in serialization
                              ///< MASTER must always be id 0, and the rest of
                              ///< the channels must be the nth position in the
                              ///< mixer, either visible or not.
                              ///< this means that the id can change if we reorder
                              ///< channels, so nothing should depend on this being
                              ///< static.
  char *                  name;        ///< channel name
  /* note: the first plugin is special, it is the "main" plugin of the channel
   * where processing starts */
  Plugin *                strip[STRIP_SIZE]; ///< the channel strip
  ChannelType             type;             ///< MIDI / Audio / Master
  float                   volume; ///< value of the volume fader in db
  float                   fader_amp; ///< fader value amplitude (0.0 ~ 1.5)
  int                     mute;            ///< mute or not
  int                     solo;           ///< solo or not
  GdkRGBA                 color;          ///< see https://ometer.com/gtk-colors.html
  float                   phase;        ///< used by the phase knob (0.0-360.0 value)
  float                   pan; ///< (0~1) 0.5 is center

  /* these are for plugins to connect to if they want
   * processing starts at the first plugin with a clean buffer,
   * and if any ports are connected as that plugin's input,
   * their buffers are added to the first plugin
   */
  StereoPorts *           stereo_in;  ///< l & r input ports
  Port *                  midi_in;   ///< MIDI in
  Port *                  piano_roll;  ///< MIDI piano roll input

  /* connecting to this is also optional
   * plugins are processed slot-by-slot, and if nothing is connected here
   * it will simply remain an empty buffer, i.e., channel will produce no sound */
  StereoPorts *           stereo_out;  ///< l & r output ports

  float                   l_port_db;   ///< current db after processing l port
  float                   r_port_db;   ///< current db after processing r port
  int                     processed;   ///< processed in this cycle or not
  int                     recording;  ///< recording mode or not
  //pthread_t         thread;     ///< the channel processing thread.
                          ///< each channel does processing on a separate thread
  jack_native_thread_t    thread;
  int                     stop_thread;    ///< flag to stop the thread
  struct Channel *        output;     ///< output channel to route signal to
  Track *                 track;   ///< the track associated with this channel
  int                     enabled; ///< enabled or not
  Automatable *           automatables[40]; ///< automatables for this channel,
                      ///< eg. volume (fader), pan, mute, etc.
  int                     num_automatables;  ///< counter
  int                     visible; ///< whether visible or not
  ChannelWidget *         widget; ///< the channel widget
} Channel;

void
channel_set_phase (void * channel, float phase);

float
channel_get_phase (void * channel);

/**
 * TODO delete
 */
//void
//channel_set_volume (void * channel, float volume);

/**
 * TODO delete
 */
//float
//channel_get_volume (void * channel);

void
channel_toggle_solo (Channel * channel);

void
channel_toggle_mute (Channel * channel);

/**
 * Sets the fader amplitude (not db)
 */
void
channel_set_fader_amp (void * _channel, float amp);

/**
 * Gets the fader amplitude (not db)
 */
float
channel_get_fader_amp (void * _channel);

void
channel_set_pan (void * _channel, float pan);

float
channel_get_pan (void * _channel);

float
channel_get_current_l_db (void * _channel);

float
channel_get_current_r_db (void * _channel);

void
channel_set_current_l_db (Channel * channel, float val);

void
channel_set_current_r_db (Channel * channel, float val);

/**
 * Used when loading projects.
 */
Channel *
channel_get_or_create_blank (int id);

/**
 * Creates a channel of the given type with the given label
 */
Channel *
channel_create (ChannelType type,
                char *      label);

/**
 * The process function prototype.
 * Channels must implement this.
 * It is used to perform processing of the audio signal at every cycle.
 *
 * Normally, the channel will call the process func on each of its plugins
 * in order.
 */
void
channel_process (Channel * channel, ///< the channel
                 nframes_t   nframes);    ///< sample count

/**
 * Adds given plugin to given position in the strip.
 *
 * The plugin must be already instantiated at this point.
 */
void
channel_add_plugin (Channel * channel,    ///< the channel
                    int         pos,     ///< the position in the strip
                                        ///< (starting from 0)
                    Plugin      * plugin  ///< the plugin to add
                    );

/**
 * Returns the index of the last active slot.
 */
int
channel_get_last_active_slot_index (Channel * channel);

/**
 * Returns the index on the mixer.
 */
int
channel_get_index (Channel * channel);

/**
 * Returns the plugin's strip index on the channel
 */
int
channel_get_plugin_index (Channel * channel,
                          Plugin *  plugin);

/**
 * Connects or disconnects the MIDI editor key press port to the channel's
 * first plugin
 */
void
channel_reattach_midi_editor_manual_press_port (Channel * channel,
                                                int     connect);

/**
 * Convenience method to get the first active plugin in the channel
 */
Plugin *
channel_get_first_plugin (Channel * channel);

/**
 * Convenience function to get the fader automatable of the channel.
 */
Automatable *
channel_get_fader_automatable (Channel * channel);

void
channel_remove_plugin (Channel * channel, int pos);

/**
 * Frees the channel.
 */
void
channel_free (Channel * channel);

#endif
